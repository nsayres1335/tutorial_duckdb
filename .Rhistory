# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename_with(.fn = my_name_repair())
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename_with(.fn = my_name_repair)
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename(.cols = everything(), .fn = my_name_repair)
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename(.cols = everything(), .fn = my_name_repair())
#| label: my_name_repair
my_name_repair <- function(col_name) {
c_escape_underscore <- c(".", "-", "&", " ") %>%
str_c("\\", ., collapse = "|")
c_nonescape_underscore <- c("\r\n") %>%
str_c(., collapse = "|")
c_replace_underscore <- str_c(c_escape_underscore, "|",
c_nonescape_underscore
)
c_escape_remove <- c("(", ")", "?") %>%
str_c("\\", ., collapse = "|")
col_name %>%
str_replace_all(c_replace_underscore, "_") %>%
str_replace_all("\\/", "_per_") %>%
str_replace_all(c_escape_remove, "") %>%
str_replace_all("__+", "_") %>%
str_replace_all("_$", "") %>%
str_to_lower()
}
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename(.cols = everything(), .fn = my_name_repair)
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
rename(.cols = everything(), .fn = my_name_repair())
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
filter(!is.na(`NOx Rate (lbs/mmBtu)`)) |>
filter(
`Unit Type` == "Combined cycle" | `Unit Type` == "Combustion turbine") |>
filter(`NOx Rate Measure Indicator` == "Measured") |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_units = n(),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
rename_with(my_name_repair)
duck_hourly_em |> colnames()
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
filter(!is.na(`NOx Rate (lbs/mmBtu)`)) |>
filter(
`Unit Type` == "Combined cycle" | `Unit Type` == "Combustion turbine") |>
filter(`NOx Rate Measure Indicator` == "Measured")
tb_hrouly_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_units = n(),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
tb_hrouly_em_summary
# with duckplyr
duck_hourly_em <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
select(all_of(names(col_name_types))) |>
filter(!is.na(`NOx Rate (lbs/mmBtu)`) & `NOx Rate (lbs/mmBtu)` > 0) |>
filter(
`Unit Type` == "Combined cycle" | `Unit Type` == "Combustion turbine") |>
filter(`NOx Rate Measure Indicator` == "Measured")
duck_hourly_em |> colnames()
tb_hrouly_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_units = n(),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
tb_hrouly_em_summary
View(tb_hrouly_em_summary)
tb_hrouly_em_summary <- duck_hourly_em |>
reframe(
.by = c(`Unit Type`, `NOx Controls`),
n_units = n(),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
tb_hrouly_em_summary
rm(tb_hrouly_em_summary)
duck_hourly_em |> colnames()
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
View(tb_hr_em_summary)
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = round(sum(`Operating Time`), 0),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
rename_with(my_name_repair)
# with duckplyr
duck_hourly_em_raw <-
read_csv_duckdb(
path_hr_em_2018_nc,
options = list(types = list(col_name_types))
) |>
compute()
duck_hourly_em <- duck_hourly_em_raw |>
select(all_of(names(col_name_types))) |>
filter(!is.na(`NOx Rate (lbs/mmBtu)`) & `NOx Rate (lbs/mmBtu)` > 0) |>
filter(
`Unit Type` == "Combined cycle" | `Unit Type` == "Combustion turbine") |>
filter(`NOx Rate Measure Indicator` == "Measured")
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
mutate(unit_type =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(nox_controls, c_replace)
) |>
rename_with(my_name_repair)
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
mutate(unit_type =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_lbs_per_mmbtu_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_max = max(`NOx Rate (lbs/mmBtu)`),
nox_rate_lbs_per_mmbtu_median = median(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
View(tb_hr_em_summary)
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05)
nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
tb_hr_em_summary <- duck_hourly_em |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05),
nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
nox_rate_max = max(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05),
nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
nox_rate_max = max(`NOx Rate (lbs/mmBtu)`),
) |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
tb_hr_em_summary
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
# summarise(
#   .by = c(`Unit Type`, `NOx Controls`),
#   n_hr_op = sum(`Operating Time`),
#   nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05),
#   nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_max = max(`NOx Rate (lbs/mmBtu)`),
#   ) |>
reframe(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),,
prob = c("min" = 0.00, "5th_percentile" = 0.05,
"median" = 0.50,
"95th percentile" = 0.95, "max" = 1.00),
quant = quantile(nox_rate_lbs_per_mmbtu, prob),
) |>
mutate(prob = names(prob)) |>
pivot_wider(names_from = prob, values_from = quant,
names_prefix = "nox_rate_") |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
# summarise(
#   .by = c(`Unit Type`, `NOx Controls`),
#   n_hr_op = sum(`Operating Time`),
#   nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05),
#   nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_max = max(`NOx Rate (lbs/mmBtu)`),
#   ) |>
reframe(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),,
prob = c("min" = 0.00, "5th_percentile" = 0.05,
"median" = 0.50,
"95th percentile" = 0.95, "max" = 1.00),
quant = quantile(`NOx Rate (lbs/mmBtu)`, prob),
) |>
mutate(prob = names(prob)) |>
pivot_wider(names_from = prob, values_from = quant,
names_prefix = "nox_rate_") |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
View(tb_hr_em_summary)
?quantile
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |> ecdf(`NOx Rate (lbs/mmBtu)`)
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`NOx Rate (lbs/mmBtu)`) |>
ecdf(`NOx Rate (lbs/mmBtu)`)
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`NOx Rate (lbs/mmBtu)`) |>
ecdf()
tb_hr_em_summary <- duck_hourly_em |>
select(`NOx Rate (lbs/mmBtu)`) |>
compute(prudence = "lavish") #|>
tb_hr_em_summary |> pluck(1)
tb_hr_em_summary <- duck_hourly_em #|>
tb_hr_em_summary <- duck_hourly_em #|>
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") #|>
tb_hr_em_summary |> pluck(`NOx Rate (lbs/mmBtu)`)
tb_hr_em_summary |> pluck(`NOx Rate (lbs/mmBtu)`,1)
tb_hr_em_summary |> select(`NOx Rate (lbs/mmBtu)`)
tb_hr_em_summary |> pluck("NOx Rate (lbs/mmBtu)")
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
pluck("NOx Rate (lbs/mmBtu)")
tb_hr_em_summary
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
pluck("NOx Rate (lbs/mmBtu)") |>
ecdf()
tb_hr_em_summary
tb_hr_em_summary |> summary
tb_hr_em_summary |> summary()
tb_hr_em_summary <- duck_hourly_em |>
compute(prudence = "lavish") |>
# summarise(
#   .by = c(`Unit Type`, `NOx Controls`),
#   n_hr_op = sum(`Operating Time`),
#   nox_rate_min = min(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_5th_perc = quantile(`NOx Rate (lbs/mmBtu)`, 0.05),
#   nox_rate_median = median(`NOx Rate (lbs/mmBtu)`),
#   nox_rate_max = max(`NOx Rate (lbs/mmBtu)`),
#   ) |>
reframe(
.by = c(`Unit Type`, `NOx Controls`),
n_hr_op = sum(`Operating Time`),
prob = c("min" = 0.00, "5th_percentile" = 0.05,
"median" = 0.50,
"95th percentile" = 0.95, "max" = 1.00),
quant = quantile(`NOx Rate (lbs/mmBtu)`, prob),
) |>
mutate(prob = names(prob)) |>
pivot_wider(names_from = prob, values_from = quant,
names_prefix = "nox_rate_") |>
collect() |>
mutate(`Unit Type` =
case_when(
str_detect(
`Unit Type`, "Combustion turbine") ~ "combustion turbine",
str_detect(`Unit Type`, "Combined cycle") ~ "combined cycle"
),
`NOx Controls` = str_replace_all(`NOx Controls`, c_replace)
) |>
rename_with(my_name_repair)
View(tb_hr_em_summary)
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
pluck("NOx Rate (lbs/mmBtu)") |>
ecdf()
tb_hr_em_ecdf |> summary()
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
summarise(
.by = c(`Unit Type`, `NOx Controls`),
ecdf = ecdf(`NOx Controls`))
?nest
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
nest(.by = c(`Unit Type`, `NOx Controls`))
tb_hr_em_ecdf
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = `NOx Rate (lbs/mmBtu)`)
tb_hr_em_ecdf
rnorm(12)
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = as.list(`NOx Rate (lbs/mmBtu)`))
mutate(ecdf =
map(data, \(rate) ecdf(rate)))
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = `NOx Rate (lbs/mmBtu)`) |>
mutate(ecdf =
map(data, \(rate) ecdf(rate)))
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = `NOx Rate (lbs/mmBtu)`) |>
mutate(ecdf =
map(nox_rate, \(rate) ecdf(rate)))
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = `NOx Rate (lbs/mmBtu)`) |>
mutate(ecdf =
map(nox_rate, \(rate) ecdf(as.list(rate))))
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |>
nest(nox_rate = `NOx Rate (lbs/mmBtu)`) |>
mutate(ecdf =
map(nox_rate, \(rate) ecdf(unlist(rate))))
tb_hr_em_ecdf
tb_hr_em_ecdf$nox_rate[[1]]
tb_hr_em_ecdf$nox_rate[[1]] |> nrow()
tb_hr_em_ecdf$ecdf[[1]]
tb_hr_em_ecdf$ecdf[[1]] |> plot()
plot(tb_hr_em_ecdf$ecdf)
plot(tb_hr_em_ecdf$ecdf[[1]])
plot(tb_hr_em_ecdf$ecdf[[2]])
plot(tb_hr_em_ecdf$ecdf[[3]])
summary(tb_hr_em_ecdf$ecdf[[3]])
quantile(tb_hr_em_ecdf$ecdf[[3]])
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) #|>
tb_hr_em_ecdf
tb_hr_em_ecdf <- duck_hourly_em |>
compute(prudence = "lavish") |>
select(`Unit Type`, `NOx Controls`, `NOx Rate (lbs/mmBtu)`) |> collect()
tb_hr_em_ecdf
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) |>
facet_wrap(vars(`Unit Type`))
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) +
facet_wrap(vars(`Unit Type`))
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) +
stat_ecdf()
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) +
stat_ecdf() +
facet_wrap(vars(`Unit Type`))
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) +
stat_ecdf(geom = "point") +
facet_wrap(vars(`Unit Type`))
tb_hr_em_ecdf |>
ggplot(aes(`NOx Rate (lbs/mmBtu)`, color = `NOx Controls`)) +
stat_ecdf(geom = "point", pad = F) +
facet_wrap(vars(`Unit Type`))
